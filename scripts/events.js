// scripts/events.js
import { openModal, closeModal } from './modal.js';

/**
 * 10 meltdown-lignende events:
 * Hver event trigges, hvis opgaven l√∏ses "quick" (=> gameState.taskOutcomes[title].quick === true)
 * OG hvis man har en vis 'cumulativeSecurityDebt' (>= X).
 * 
 * Navnene skal matche EXACT de titler, du har i tasks' "title" felt.
 * Just√©r thresholds og tid-straf, som du vil.
 */
const eventsList = [
  // 1) HPC meltdown (infrastrukturTasks)
  {
    name: "üí• HPC meltdown",
    condition: (gameState) => {
      const key = "HPC-klynge til laboratorieanalyser"; // fra infrastrukturTasks
      const outcome = gameState.taskOutcomes[key];
      if (!outcome) return false;
      return outcome.quick && gameState.cumulativeSecurityDebt >= 3;
    },
    message: "Din HPC-klynge, der blev sat op med en hurtig l√∏sning, g√•r ned! Du mister 3 Tid p√• brand-slukning.",
    effect: (gameState) => {
      gameState.time -= 3;
      if (gameState.time < 0) gameState.time = 0;
    }
  },
  // 2) Container meltdown (infrastrukturTasks)
  {
    name: "üõë Container meltdown",
    condition: (gameState) => {
      const key = "Containerisering af hospitalets services";
      const outcome = gameState.taskOutcomes[key];
      if (!outcome) return false;
      return outcome.quick && gameState.cumulativeSecurityDebt >= 2;
    },
    message: "Din container-ops√¶tning var uf√¶rdig, og en vigtig service krakelerer pludselig! -2 Tid.",
    effect: (gameState) => {
      gameState.time -= 2;
      if (gameState.time < 0) gameState.time = 0;
    }
  },
  // 3) Netv√¶rksopgradering meltdown (infrastrukturTasks)
  {
    name: "üï∏Ô∏è Netv√¶rks meltdown",
    condition: (gameState) => {
      const key = "Netv√¶rksopgradering"; // Standard i infrastrukturTasks?
      const outcome = gameState.taskOutcomes[key];
      if (!outcome) return false;
      return outcome.quick && gameState.cumulativeSecurityDebt >= 3;
    },
    message: "Netv√¶rket fejer pludselig sammen, pga. en halv l√∏sning. Du mister 3 Tid p√• genstart og fejlfinding.",
    effect: (gameState) => {
      gameState.time -= 3;
      if (gameState.time < 0) gameState.time = 0;
    }
  },
  // 4) Sikkerhedsopdatering meltdown (cybersikkerhedTasks)
  {
    name: "üíø Software meltdown",
    condition: (gameState) => {
      const key = "Sikkerhedsopdatering af software";
      const outcome = gameState.taskOutcomes[key];
      if (!outcome) return false;
      return outcome.quick && gameState.cumulativeSecurityDebt >= 3;
    },
    message: "Dine hurtige sikkerhedsopdateringer var utilstr√¶kkelige ‚Äì en gammel exploit lukker systemet ned! -3 Tid.",
    effect: (gameState) => {
      gameState.time -= 3;
      if (gameState.time < 0) gameState.time = 0;
    }
  },
  // 5) 2FA meltdown (cybersikkerhedTasks)
  {
    name: "üîê 2FA meltdown",
    condition: (gameState) => {
      const key = "Implementering af to-faktor autentifikation";
      const outcome = gameState.taskOutcomes[key];
      if (!outcome) return false;
      return outcome.quick && gameState.cumulativeSecurityDebt >= 2;
    },
    message: "Din to-faktor-l√∏sning var sat op uden reelle kontroller. Hackere omg√•r systemet, du mister 2 Tid.",
    effect: (gameState) => {
      gameState.time -= 2;
      if (gameState.time < 0) gameState.time = 0;
    }
  },
  // 6) LIMS meltdown (hospitalTasks)
  {
    name: "üîì LIMS meltdown",
    condition: (gameState) => {
      const key = "Nyt LIMS"; // fx "Nyt LIMS" i hospitalTasks
      const outcome = gameState.taskOutcomes[key];
      if (!outcome) return false;
      return outcome.quick && gameState.cumulativeSecurityDebt >= 3;
    },
    message: "Det nye LIMS var ikke robust nok ‚Äì meltdown i systemet! Du mister 3 Tid p√• at rulle tilbage.",
    effect: (gameState) => {
      gameState.time -= 3;
      if (gameState.time < 0) gameState.time = 0;
    }
  },
  // 7) EHR meltdown (hospitalTasks)
  {
    name: "üìâ EHR meltdown",
    condition: (gameState) => {
      const key = "Opgradering af EHR";
      const outcome = gameState.taskOutcomes[key];
      if (!outcome) return false;
      return outcome.quick && gameState.cumulativeSecurityDebt >= 2;
    },
    message: "Dit EHR-system g√•r ned pga. overfladisk opgradering. -2 Tid.",
    effect: (gameState) => {
      gameState.time -= 2;
      if (gameState.time < 0) gameState.time = 0;
    }
  },
  // 8) AI meltdown (hospitalTasks)
  {
    name: "ü§ñ AI meltdown",
    condition: (gameState) => {
      const key = "Implementering af AI-diagnosev√¶rkt√∏j";
      const outcome = gameState.taskOutcomes[key];
      if (!outcome) return false;
      return outcome.quick && gameState.cumulativeSecurityDebt >= 3;
    },
    message: "AI-diagnosev√¶rkt√∏jet fejlmelder patienter pga. sl√∏set implementering. -3 Tid.",
    effect: (gameState) => {
      gameState.time -= 3;
      if (gameState.time < 0) gameState.time = 0;
    }
  },
  // 9) Telemed meltdown (hospitalTasks)
  {
    name: "üì° Telemed meltdown",
    condition: (gameState) => {
      const key = "Implementering af telemedicin";
      const outcome = gameState.taskOutcomes[key];
      if (!outcome) return false;
      return outcome.quick && gameState.cumulativeSecurityDebt >= 3;
    },
    message: "Telemedicin-l√∏sningen var for hastigt sat op ‚Äì brud p√• videoforbindelsen! -3 Tid.",
    effect: (gameState) => {
      gameState.time -= 3;
      if (gameState.time < 0) gameState.time = 0;
    }
  },
  // 10) Generisk hacker infiltration (ingen bestemt opgave, blot stor g√¶ld)
  {
    name: "üëæ Hacker infiltration",
    condition: (gameState) => {
      return gameState.cumulativeSecurityDebt >= 6; 
    },
    message: "En hackergruppe udnytter dine mange l√∏se ender ‚Äì systemer lammes, du mister 5 Tid \u{1F4A5}",
    effect: (gameState) => {
      gameState.time -= 5;
      if (gameState.time < 0) gameState.time = 0;
    }
  }
];

/**
 * triggerRandomEvent(gameState)
 * - Maks 2 events pr. PI
 * - Grundchance ~0.325 + (0.02 * securityDebt)
 * - V√¶lg tilf√¶ldigt √©n event fra dem, hvor condition(...) = true
 */
export function triggerRandomEvent(gameState) {
  // Mindst 2 opgaver l√∏st, og maks 2 events pr. PI
  if (gameState.tasksCompleted < 2) return;
  if (gameState.eventsTriggeredThisPI >= 2) return;

  // Start-chance
  let eventChance = 0.5 * 0.65; // ~0.325
  // For√∏g ift. securityDebt
  eventChance += 0.02 * gameState.cumulativeSecurityDebt;

  if (Math.random() > eventChance) return;

  // Filtrer events, hvis condition er true
  const possibleEvents = eventsList.filter(ev => ev.condition(gameState));
  if (possibleEvents.length === 0) return;

  // V√¶lg √©n tilf√¶ldig event
  const chosenEvent = possibleEvents[Math.floor(Math.random() * possibleEvents.length)];
  
  gameState.eventsTriggeredThisPI++;

  // Anvend eventens effekt
  chosenEvent.effect(gameState);

  // Vis event i modal
  openModal(
    `<h2>H√¶ndelse!</h2><p>${chosenEvent.message}</p>`,
    `<button id="eventOk" class="modern-btn">OK</button>`
  );

  // G√∏r modal markant
  const modalContent = document.querySelector('.modal-content');
  if (modalContent) {
    modalContent.classList.add('event-modal');
  }
  
  // Luk modal ved klik
  document.getElementById('eventOk').addEventListener('click', () => {
    if (modalContent) {
      modalContent.classList.remove('event-modal');
    }
    closeModal();
  });
}
